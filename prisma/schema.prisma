generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ✅ Enum for Role (Prevents accidental typos in DB)
enum UserRole {
  USER
  ADMIN
}

/// ✅ Enum for Subscription Status
enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIAL
}

model User {
  id             String        @id @default(uuid())
  name           String?
  email          String        @unique
  password       String
  role           String        @default("user") // Either "user" or "admin"
  createdAt      DateTime      @default(now())

  // ✅ Define the relation properly
  subscriptions  Subscription[] // A user can have multiple subscriptions
  aiReports      AIReport[]
  emailLogs      EmailLog[]
}

model AIReport {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  report    String
  createdAt DateTime @default(now())

  @@index([userId]) // ✅ Index for faster lookups
}

model Subscription {
  id        String  @id @default(uuid())
  userId    String  @unique // ✅ Add a userId field to link it to a User
  status    String  @default("inactive") // active, inactive, trial
  createdAt DateTime @default(now())

  // ✅ Establish the relation
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   String
  status    String   @default("sent")
  clicked   Boolean  @default(false) // ✅ Tracks email interactions
  createdAt DateTime @default(now())

  @@index([userId]) // ✅ Index for lookups
}